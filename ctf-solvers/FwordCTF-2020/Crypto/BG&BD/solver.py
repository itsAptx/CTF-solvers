from Crypto.Util.number import *
from gmpy2 import invert
import math
from sympy import nextprime

def verify_keys(a,b):
	while True:
		if a%4==3:
			while b%4!=3:
				b=nextprime(b)
			return a,b
		if b%4==3:
			while a%4!=3:
				a=nextprime(a)
			return a,b
		a,b=nextprime(a),nextprime(b)

def dec(msg, bs, ll, mds):
	x = 15564066497424
	c = ''
	for i in range(ll):
		x = pow(x,2,mds)
		p = (bin(x)[2:])[-bs:] #ekher block
		c_i = int(p,2)^int(msg[i*bs:(i+1)*bs],2)
		ci_bin = format(c_i, '0' + str(bs) + 'b') #bin
		c += ci_bin
	return c

#Part1 : Boneh Durfee
n = 136925867715334350539351541819374303153581861883077425871381479619256902280896182751175418274848819117804106313526390171733172646719203781502341411544996240718046559322020330755493739123717974336861438650061159088512867158495809372652057009979517497499951599965613535967213529497308200114836792389883404448987
d = 23974584842546960047080386914966001070087596246662608796022581200084145416583
c = 46282600628982824130530839707152802257095678655388901777970530297126873677669029302844975736419114037407828011895452774978714646752289839556387176301641119447701609034322702222708553203047498652811019927150942380861621605039714510498733535604972160616786208389979609391313009722848684563568437967800442928084

part1 = long_to_bytes(pow(c1,d1,n))


#Recover p given n,e,d
p = 0
k = e*d - 1
g = 2
while True:
	t = k
	g = nextprime(g)
	print g
	while t%2 == 0:
		t = t//2
		x = pow(g,t,n)
		if x>1:
			g = gcd(x-1,n)
			if g>1:
				p = g
				break

p = 11391686090403905599695015583829755003551766728158057028281938682097322841603835874354540607209988671617182359012432600907514677996087087987893334356043831
q = n/p
assert p*q == n

p2, q2 = verify_keys(p,q)
N = p2*q2

cipher

block_size = 9
block_nbre = len(cipher2)/9

flag = dec(cipher2, 9, block_nbre, N)
print long_to_bytes(int(flag,2))
